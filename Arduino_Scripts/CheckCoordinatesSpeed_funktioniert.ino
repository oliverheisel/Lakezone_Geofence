#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <LiquidCrystal_I2C.h>
#include <avr/pgmspace.h>

static const int RXPin = 4, TXPin = 3;
static const uint32_t GPSBaud = 9600;

TinyGPSPlus gps;
SoftwareSerial ss(RXPin, TXPin);
LiquidCrystal_I2C lcd(0x27, 16, 2);

int ROT = 8;
int GELB = 9;
int GRUN = 10;


const uint8_t polySides = 179;

// Grosses Polygon
const float polyX[polySides] PROGMEM = {45.576489947, 90.323515135, 106.646121384, 126.432929667, 161.042399153, 165.814000805, 145.857243108, 135.01559567, 144.469731493, 161.113592326, 157.511264957, 145.240832261, 192.133132617, 190.226175295, 131.52899263, 133.436101, 128.718070064, 123.204148095, 124.638259806, 117.238915435, 130.020980089, 155.813217999, 156.38618183, 142.672002192, 141.283814108, 142.643272966, 137.510202339, 140.213492134, 178.275889731, 201.403100379, 195.141233246, 196.050203337, 186.959121938, 173.910137268, 161.80469963, 166.389468015, 163.913642224, 145.770342817, 135.328009171, 122.138145166, 107.026129546, 104.172264558, 101.706830831, 98.973645819, 100.947190437, 97.713265942, 109.686156506, 115.670437502, 101.769990431, 92.261334188, 86.262451063, 77.154131568, 88.781499821, 100.181186922, 90.691850385, 84.499722913, 93.935828223, 103.97838897, 97.488683205, 100.245878778, 104.229733073, 98.210710866, 88.557679411, 93.823680717, 99.163137259, 94.313010858, 105.441728379, 111.993464718, 106.048596171, 107.724431261, 111.023425921, 113.276977304, 82.120787471, 82.738748961, 115.152308728, 108.926840563, 99.277645911, 113.116411066, 134.080215735, 149.644588818, 157.666619876, 164.808719422, 165.737346301, 172.779672363, 178.713318448, 158.188717254, 147.538448422, 154.768253993, 156.49845906, 142.644455313, 155.357497113, 160.236933038, 142.957256181, 132.982753442, 138.199047125, 142.947536407, 196.432697751, 272.127261288, 282.994996035, 300.015820826, 355.306243746, 13.880518593, 353.28223503, 347.723249473, 348.364485765, 346.74510809, 3.607591607, 6.75532176, 345.115520065, 333.569867435, 333.322950358, 343.927398645, 343.954891401, 337.554006798, 331.178082378, 314.29369874, 337.42044863, 357.905445336, 338.595556842, 341.570076804, 344.626684514, 333.119386028, 318.399239627, 322.743772755, 325.520210152, 7.989724779, 55.958696013, 45.353576626, 75.055375679, 74.128560606, 33.329659747, 34.256618979, 27.421993194, 21.57560308, 23.021292177, 13.016077144, 3.664771425, 353.411571272, 342.603072058, 335.070582346, 330.66956592, 328.513715651, 324.716632487, 348.005301498, 18.322801207, 21.556687703, 17.852533826, 10.303404001, 5.537934644, 3.683796682, 1.717929519, 359.642443812, 355.160518436, 348.335401634, 350.938963667, 8.198674954, 17.54180454, 13.639622989, 5.585012125, 0.958667254, 355.693943309, 354.23601545, 347.64125845, 346.064427514, 44.938177049, 50.567925508, 4.570382963, 19.778079396, 26.186160806, 7.765029604, 354.656394962, 336.24254834, 352.298727654, 14.685072518, 2.174580698, 342.115334337, 2.945046293, 25.07965551, 45.576489947}; // X
const float polyY[polySides] PROGMEM = {8.538077425, 8.546341109, 8.546424529, 8.546590466, 8.5466713, 8.546671335, 8.546904048, 8.546924719, 8.547311463, 8.54739606, 8.547424865, 8.547459922, 8.547707999, 8.547694996, 8.547710244, 8.54776094, 8.547824554, 8.547923892, 8.548029414, 8.548055243, 8.548106854, 8.548129288, 8.548147536, 8.548182621, 8.548242098, 8.548297165, 8.548450961, 8.548479463, 8.548481834, 8.548395247, 8.548338094, 8.548325118, 8.548308449, 8.54830522, 8.548314302, 8.548394087, 8.548406992, 8.548624695, 8.548757931, 8.549151968, 8.54968098, 8.549889454, 8.550210058, 8.550484322, 8.55072745, 8.550819132, 8.550843726, 8.550858076, 8.551417527, 8.552033298, 8.552150736, 8.552733918, 8.552780794, 8.552896142, 8.553518549, 8.553772242, 8.553901106, 8.554080441, 8.554097838, 8.554167413, 8.55426333, 8.55432985, 8.554970234, 8.555098844, 8.555210582, 8.555417404, 8.55550578, 8.55578099, 8.555826986, 8.556113077, 8.556275214, 8.556411985, 8.556454836, 8.556456349, 8.556676442, 8.556861752, 8.557430186, 8.558034135, 8.558075768, 8.558809483, 8.558817496, 8.558849229, 8.558850372, 8.55887129, 8.558834363, 8.558955417, 8.559009559, 8.559182905, 8.559217115, 8.559418472, 8.559441525, 8.55946508, 8.559701604, 8.559715925, 8.5597381, 8.559751692, 8.559768497, 8.539995928, 8.539475311, 8.539287866, 8.539176401, 8.53925083, 8.539253152, 8.53921952, 8.53918202, 8.539170414, 8.539021152, 8.539100033, 8.539036018, 8.538786074, 8.53871012, 8.538591795, 8.53856802, 8.538544738, 8.538451355, 8.538155657, 8.538138367, 8.538165994, 8.53805244, 8.538047534, 8.538025221, 8.538007466, 8.537780718, 8.537774477, 8.537753574, 8.537506742, 8.537653373, 8.537716408, 8.537915959, 8.537923514, 8.537957002, 8.537970621, 8.538052899, 8.538080771, 8.538147564, 8.538162298, 8.538206892, 8.538205527, 8.538130111, 8.538094478, 8.538017591, 8.537967623, 8.537877589, 8.537691761, 8.537724151, 8.537735857, 8.537773526, 8.537835602, 8.537842284, 8.537847082, 8.537851271, 8.53785206, 8.537844704, 8.537812658, 8.537799033, 8.53779412, 8.53779667, 8.537832351, 8.537856082, 8.537854389, 8.53785509, 8.537854204, 8.537852677, 8.537836472, 8.537831922, 8.537841017, 8.537861491, 8.53786317, 8.538092526, 8.538199634, 8.538199977, 8.538112862, 8.538066201, 8.538080859, 8.5380895, 8.538052438, 8.537972678, 8.537979581, 8.538077425}; // Y

const uint8_t polySides2 = 65;

// kleines Polygon
const float polyX2[polySides2] PROGMEM = {24.220585658, 112.706608929, 145.347266556, 135.327120134, 122.137712075, 107.025967725, 104.062831122, 101.299704246, 98.675904324, 105.459168153, 101.77003701, 92.261333756, 86.262376309, 88.55379224, 90.691870263, 97.299504605, 104.229776739, 98.210662418, 100.218131345, 99.163117941, 103.970825333, 111.993441264, 106.048458415, 107.724303935, 111.023324076, 113.894812417, 115.152171215, 108.92672482, 135.124770476, 158.186998166, 147.536973856, 154.766617887, 156.496763879, 159.591592553, 160.236110114, 201.658841592, 279.409052215, 331.982564151, 353.284285012, 347.725263455, 348.383307826, 346.797298604, 3.642964436, 6.757334899, 345.117430491, 333.571548458, 333.324625461, 343.929255226, 343.956740647, 337.555753527, 331.179731981, 334.780453654, 347.727060141, 344.628576277, 333.121101808, 3.895531102, 27.423545903, 21.577345599, 23.023065187, 13.018056284, 3.666870626, 353.413638541, 342.604945375, 335.387683314, 24.220585658}; // X
const float polyY2[polySides2] PROGMEM = {8.539940809, 8.546797749, 8.54689623, 8.54702947, 8.54781755, 8.548875561, 8.549224216, 8.549676951, 8.549957802, 8.550261635, 8.550842968, 8.55207448, 8.552191915, 8.552775494, 8.553640301, 8.553670931, 8.553695429, 8.553761948, 8.554740728, 8.554758022, 8.554809295, 8.554888346, 8.554934342, 8.555208167, 8.555345609, 8.555419149, 8.555649904, 8.555835211, 8.556883769, 8.557091612, 8.557145757, 8.557291353, 8.55731599, 8.557521426, 8.557539488, 8.557922108, 8.542000405, 8.54121068, 8.541211248, 8.541183369, 8.541150397, 8.541127732, 8.541038143, 8.541078121, 8.540950124, 8.540700201, 8.540624385, 8.540502945, 8.540479174, 8.54045583, 8.540362455, 8.54012425, 8.539990398, 8.539943121, 8.539925367, 8.539785884, 8.539918728, 8.539966063, 8.540087919, 8.540102655, 8.540191865, 8.540190503, 8.540039696, 8.540004066, 8.539940809}; // Y

unsigned long previousMillis = 0; // will store last time LED was updated
const long interval = 500; // interval at which to blink (milliseconds)

void setup() {
  pinMode(ROT, OUTPUT);
  pinMode(GELB, OUTPUT);
  pinMode(GRUN, OUTPUT);

  Serial.begin(9600);
  ss.begin(GPSBaud);
  lcd.init();
  lcd.backlight();
}

void loop() {
  static bool ledState = LOW;
  unsigned long currentMillis = millis();

  if (ss.available() > 0) {
    if (gps.encode(ss.read())) {
      if (gps.location.isUpdated()) {
        bool inLargePolygon = pointInPolygon(gps.location.lng(), gps.location.lat(), polyX, polyY, polySides);
        bool inSmallPolygon = pointInPolygon(gps.location.lng(), gps.location.lat(), polyX2, polyY2, polySides2);
        lcd.setCursor(0, 1);
        lcd.print("2");
        double speedKmH = gps.speed.kmph();

        int ledPin = ROT; // Default to outside both polygons
        bool shouldBlink = speedKmH > 10;
        
        if (inSmallPolygon) {
          ledPin = GRUN;
          shouldBlink = speedKmH > 40;
        } else if (inLargePolygon) {
          ledPin = GELB;
        }

        if (shouldBlink && currentMillis - previousMillis >= interval) {
          previousMillis = currentMillis;
          if (ledState == LOW) {
            ledState = HIGH;
          } else {
            ledState = LOW;
          }
          digitalWrite(ROT, LOW);
          digitalWrite(GELB, LOW);
          digitalWrite(GRUN, LOW);
          digitalWrite(ledPin, ledState);
        } else if (!shouldBlink) {
          digitalWrite(ROT, LOW);
          digitalWrite(GELB, LOW);
          digitalWrite(GRUN, LOW);
          digitalWrite(ledPin, HIGH);
        }

        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Lat:");
        lcd.print(gps.location.lat(), 6);
        lcd.setCursor(0, 1);
        lcd.print("Lng:");
        lcd.print(gps.location.lng(), 6);
      }
    }
  }
}

bool pointInPolygon(float x, float y, const float *polyX, const float *polyY, int polySides) {
  bool oddNodes = false;
  int j = polySides - 1;
  for (int i = 0; i < polySides; i++) {
    float xi = pgm_read_float_near(&polyX[i]);
    float yi = pgm_read_float_near(&polyY[i]);
    float xj = pgm_read_float_near(&polyX[j]);
    float yj = pgm_read_float_near(&polyY[j]);
    if ((yi < y && yj >= y) || (yj < y && yi >= y)) {
      oddNodes ^= (xi + (y - yi) / (yj - yi) * (xj - xi) < x);
    }
    j = i;
  }
  return oddNodes;
}